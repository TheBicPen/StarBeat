######################################################################
# CSCB58 Winter 2021 Assembly Final Project
# University of Toronto, Scarborough
#
# Student: Alexander Efimov, efimoval, 1004929759
#
# Bitmap Display Configuration:
# -Unit width in pixels: 8
# -Unit height in pixels: 8
# -Display width in pixels: 256
# -Display height in pixels: 512
# -Base Address for Display: 0x10008000 ($gp)
#
# Which milestones have been reached in this submission?
# (See the assignment handout for descriptions of the milestones)
# -Milestone 1 DONE
# -Milestone 2 DONE
# -Milestone 3 DONE
# -Milestone 4 DONE
#
# Which approved features have been implemented for milestone 4?
# (See the assignment handout for the list of additional features)
# 1. Level selection screen
# 2. Smooth graphics - the whole framebuffer is not redrawn each frame - only parts that have changed are redrawn
# 3. Powerups - shield and repair
# 4. Different enemy patterns
# 5. Music loop
#
#
# Link to video demonstration for final submission:
# -MyMedia: https://play.library.utoronto.ca/b734d162fc5b0b7b2c82b195ec02acc3
# -Youtube mirror: https://youtu.be/6tw44SpPW_A
#
#
# Link to video of OLD VERSION:
# -MyMedia: https://play.library.utoronto.ca/194efd659faf5892174ad55d197708f2 OLD VERSION
# -Youtube mirror: https://youtu.be/AY7EIu0PGSw OLD VERSION
#
# Are you OK with us sharing the video with people outside course staff?
# - yes, and please share this project github link as well! https://github.com/TheBicPen/CSCB58-Project (email me if I forget to make this public)
#
# Any additional information that the TA needs to know:
# - The green level has safe zones on the edges of the screen. No asteroids will fall there.
# - The game has sound.
# - Change the key repeat delay (On Windows) to short and the repeat rate to fast in order to control the ship better
# - Restart MARS before running the code. I'm using the version with the crash fixed, and it sometimes starts lagging after running the program a few times.
######################################################################

######## Constants
.eqv 	SCREEN_WIDTH	32	# units
.eqv 	SCREEN_HEIGHT	64	# units
.eqv 	FRAME_BUFFER	0x10008000
.eqv 	INPUT_BUFFER	0xffff0000

# game sounds
.eqv	INSTRUMENT	81	# MIDI instrument to play notes with
.eqv	AUDIO_VOLUME	60

# stage select sounds
.eqv	STAGE_SELECT_DURATION	150
.eqv	STAGE_SELECT_PITCH	50

# Use frame-based delay for notes - realtime syscalls are expensive
.eqv	FRAME_DELAY	20	# millisecond delay between frames, ie. inverse of framerate. Currently 50 FPS
.eqv	SHIP_EXPLODE_ANIMATION_DELAY	500
.eqv	LAST_SONG_INDEX		3	# number of songs-1
.eqv	NUM_SONG_SELECT_SCREENS	2	# number of song select screens

# song-specific info
.eqv	SONG1_LENGTH	64		# number of notes in song1
.eqv 	SONG1_NOTE_DURATION	300	# duration of note in ms
.eqv	SONG1_FRAMES_PER_NOTE	8	# How many frames there are per note. This uses a realtime clock so lag might cause the music to sound wrong, 
					# and no lag might cause overlaps if set too high
					# The implementation of this in MARS only allows 1 sound at a time (overlaps cause weird audio glitches)

.eqv	SONG2_LENGTH	362		# number of notes in song2
.eqv 	SONG2_NOTE_DURATION	300	# duration of note in ms
.eqv	SONG2_FRAMES_PER_NOTE	5	# How many frames there are per note.

.eqv	SONG3_LENGTH	354		# number of notes in song2
.eqv 	SONG3_NOTE_DURATION	250	# duration of note in ms
.eqv	SONG3_FRAMES_PER_NOTE	5	# How many frames there are per note.

	# stage 4 isn't a song at all
.eqv	SONG4_LENGTH	32		# number of notes in song2
.eqv 	SONG4_NOTE_DURATION	500	# duration of note in ms
.eqv	SONG4_FRAMES_PER_NOTE	10	# How many frames there are per note.

# gameplay settings
.eqv	OBJECT_SPEED	2		# speed of objects to avoid
.eqv	POWERUP_OBJECT_SPEED	1	# speed of objects to collect
.eqv 	MAX_HEALTH	10
.eqv 	INITIAL_HEALTH	7		# should be less than or equal to max health
.eqv	SHIELD_FRAMES	200		# duration of shield in frames
.eqv 	COLLISION_DAMAGE	1	# Damage per collision frame. Set to 0 for invincibility

# colours
.eqv	SHIP_COLOUR1	0x0000bb
.eqv	SHIP_COLOUR2	0x888888
.eqv	SHIP_COLOUR3	0xff9900	# not used
.eqv	ENEMY_COLOUR1	0x555555
.eqv	ENEMY_COLOUR2	0x777777
.eqv	ENEMY_COLOUR3	0x444444
.eqv	HP_COLOUR1	0xff0000	# no shield
.eqv	HP_COLOUR2	0x0fdfff	# shield
.eqv 	POWERUP_COLOUR1	0x33dd33	# repair
.eqv 	POWERUP_COLOUR2	0x0fdfff	# shield
.eqv	SHIP_EXPLODE1	0xfc520f
.eqv	SHIP_EXPLODE2	0xfc7e0f
.eqv	SHIP_EXPLODE3	0xfca50f
.eqv	SONG1_COLOUR	0x00ee00
.eqv	SONG2_COLOUR	0xeeee00
.eqv	SONG3_COLOUR	0xeeee00
.eqv	SONG4_COLOUR	0xee0000

.data
# Short song loop - adapted from https://onlinesequencer.net/634591
# store the pitch only. 0 indicates no note played
song1:			.byte  	59, 54, 47, 54, 54, 49, 0, 49, 55, 50, 43, 50, 60, 55, 48, 55, 59, 0, 59, 0, 54, 0, 54, 0, 55, 0, 55, 0, 60, 0, 60, 0, 59, 54, 47, 54, 54, 49, 0, 49, 55, 50, 43, 50, 60, 55, 48, 55, 59, 59, 59, 59, 58, 58, 58, 58, 57, 57, 57, 57, 58, 58, 58, 58

# For debugging purposes, the edges of the screen are safe since 3 < values < 26. Generated with [3*(x % 8)+4 if x > 0 else 0 for x in above list]
# If you want to generate your own values, ensure that 0 < values < 29 so that enemies aren't off the edges of the screen.
song1_objects:		.byte	13, 22, 25, 22, 22, 7,  0,  7, 25, 10, 13, 10, 16, 25, 4, 25, 13,  0, 13, 0, 22, 0, 22, 0, 25, 0, 25, 0, 16, 0, 16, 0, 13, 22, 25, 22, 22,  7, 0,  7, 25, 10, 13, 10, 16, 25,  4, 25, 19, 15,  9,  5,  2,  6,  10,  14,  7,  7,  7,  7, 12, 10,  8,  6
# make sure that all objects on non-empty notes have a value of 1, 2, or 3. Generate with [(x - 1) % 3 + 1 if x > 0 else 0 for x in a]
song1_object_type:	.byte	1,  2,  1,  2,  2,  3,  0,  3,  1,  2,  1,  2,  3,  1, 3,  1,  1,  0,  1, 0,  2, 0,  2, 0,  1, 0,  1, 0,  3, 0,  3, 0,  1,  2,  1,  2,  2,  3, 0,  3,  1,  2,  1,  2,  3,  1,  3,  1,  1,  1,  1,  1,  2,  2,  2,  2,  3,  3,  3,  3,  2,  2,  2,  2

# flowering night - adapted from https://onlinesequencer.net/642497
song2:			.byte	71, 0, 79, 0, 78, 79, 78, 0, 81, 0, 79, 0, 78, 79, 78, 74, 76, 0, 83, 0, 81, 83, 81, 83, 86, 0, 83, 0, 81, 0, 83, 0, 71, 0, 79, 0, 78, 79, 78, 0, 81, 0, 79, 0, 78, 79, 78, 74, 76, 0, 83, 0, 81, 83, 81, 83, 87, 0, 83, 0, 81, 0, 83, 0, 71, 0, 79, 0, 78, 79, 78, 0, 81, 0, 79, 0, 78, 79, 78, 74, 76, 0, 83, 0, 81, 83, 81, 83, 86, 0, 83, 0, 81, 0, 83, 0, 71, 0, 79, 0, 78, 79, 78, 0, 81, 0, 79, 0, 78, 79, 78, 74, 76, 0, 83, 0, 81, 83, 81, 83, 86, 0, 86, 0, 88, 0, 0, 72, 0, 80, 0, 79, 80, 79, 0, 82, 0, 80, 0, 79, 80, 79, 75, 77, 0, 84, 0, 82, 84, 82, 84, 87, 0, 84, 0, 82, 0, 84, 0, 72, 0, 80, 0, 79, 80, 79, 0, 82, 0, 80, 0, 79, 80, 79, 75, 77, 0, 84, 0, 82, 84, 82, 84, 88, 0, 84, 0, 82, 0, 84, 
				0, 72, 0, 80, 0, 79, 80, 79, 0, 82, 0, 80, 0, 79, 80, 79, 75, 77, 0, 84, 0, 82, 84, 82, 84, 87, 0, 84, 0, 82, 0, 84, 0, 72, 0, 80, 0, 79, 80, 79, 0, 82, 0, 80, 0, 79, 80, 79, 75, 77, 0, 84, 0, 82, 84, 82, 84, 87, 0, 87, 0, 89, 0, 0, 79, 0, 74, 0, 82, 0, 74, 0, 81, 0, 74, 0, 79, 0, 74, 0, 78, 0, 74, 0, 86, 0, 74, 0, 81, 0, 74, 0, 78, 0, 74, 0, 79, 0, 74, 0, 82, 0, 74, 0, 81, 0, 74, 0, 79, 0, 74, 0, 78, 0, 74, 0, 86, 0, 74, 0, 78, 0, 0, 79, 0, 0, 74, 0, 82, 0, 74, 0, 81, 0, 74, 0, 79, 0, 78, 0, 0, 74, 0, 86, 0, 74, 0, 81, 0, 74, 0, 78, 0, 82, 0, 0, 79, 0, 82, 0, 84, 0, 0, 86, 0, 89, 0, 91, 0, 0, 0, 0
				
song2_objects:		.byte	4, 0, 28, 0, 25, 28, 25, 0, 4, 0, 28, 0, 25, 28, 25, 13, 19, 0, 10, 0, 4, 10, 4, 10, 19, 0, 10, 0, 4, 0, 10, 0, 4, 0, 28, 0, 25, 28, 25, 0, 4, 0, 28, 0, 25, 28, 25, 13, 19, 0, 10, 0, 4, 10, 4, 10, 22, 0, 10, 0, 4, 0, 10, 0, 4, 0, 28, 0, 25, 28, 25, 0, 4, 0, 28, 0, 25, 28, 25, 13, 19, 0, 10, 0, 4, 10, 4, 10, 19, 0, 10, 0, 4, 0, 10, 0, 4, 0, 28, 0, 25, 28, 25, 0, 4, 0, 28, 0, 25, 28, 25, 13, 19, 0, 10, 0, 4, 10, 4, 10, 19, 0, 19, 0, 25, 0, 0, 7, 0, 1, 0, 28, 1, 28, 0, 7, 0, 1, 0, 28, 1, 28, 16, 22, 0, 13, 0, 7, 13, 7, 13, 22, 0, 13, 0, 7, 0, 13, 0, 7, 0, 1, 0, 28, 1, 28, 0, 7, 0, 1, 0, 28, 1, 28, 16, 22, 0, 13, 0, 7, 13, 7, 13, 25, 0, 13, 0, 7, 0, 13, 0, 7, 0, 1, 0, 28, 1, 28, 0, 7, 0, 1, 
				0, 28, 1, 28, 16, 22, 0, 13, 0, 7, 13, 7, 13, 22, 0, 13, 0, 7, 0, 13, 0, 7, 0, 1, 0, 28, 1, 28, 0, 7, 0, 1, 0, 28, 1, 28, 16, 22, 0, 13, 0, 7, 13, 7, 13, 22, 0, 22, 0, 28, 0, 0, 28, 0, 13, 0, 7, 0, 13, 0, 4, 0, 13, 0, 28, 0, 13, 0, 25, 0, 13, 0, 19, 0, 13, 0, 4, 0, 13, 0, 25, 0, 13, 0, 28, 0, 13, 0, 7, 0, 13, 0, 4, 0, 13, 0, 28, 0, 13, 0, 25, 0, 13, 0, 19, 0, 13, 0, 25, 0, 0, 28, 0, 0, 13, 0, 7, 0, 13, 0, 4, 0, 13, 0, 28, 0, 25, 0, 0, 13, 0, 19, 0, 13, 0, 4, 0, 13, 0, 25, 0, 7, 0, 0, 28, 0, 7, 0, 13, 0, 0, 19, 0, 28, 0, 4, 0, 0, 0, 0

song2_object_type:	.byte	3, 0, 2, 0, 1, 2, 1, 0, 1, 0, 2, 0, 1, 2, 1, 3, 2, 0, 3, 0, 1, 3, 1, 3, 3, 0, 3, 0, 1, 0, 3, 0, 3, 0, 2, 0, 1, 2, 1, 0, 1, 0, 2, 0, 1, 2, 1, 3, 2, 0, 3, 0, 1, 3, 1, 3, 1, 0, 3, 0, 1, 0, 3, 0, 3, 0, 2, 0, 1, 2, 1, 0, 1, 0, 2, 0, 1, 2, 1, 3, 2, 0, 3, 0, 1, 3, 1, 3, 3, 0, 3, 0, 1, 0, 3, 0, 3, 0, 2, 0, 1, 2, 1, 0, 1, 0, 2, 0, 1, 2, 1, 3, 2, 0, 3, 0, 1, 3, 1, 3, 3, 0, 3, 0, 2, 0, 0, 1, 0, 3, 0, 2, 3, 2, 0, 2, 0, 3, 0, 2, 3, 2, 1, 3, 0, 1, 0, 2, 1, 2, 1, 1, 0, 1, 0, 2, 0, 1, 0, 1, 0, 3, 0, 2, 3, 2, 0, 2, 0, 3, 0, 2, 3, 2, 1, 3, 0, 1, 0, 2, 1, 2, 1, 2, 0,
				1, 0, 2, 0, 1, 0, 1, 0, 3, 0, 2, 3, 2, 0, 2, 0, 3, 0, 2, 3, 2, 1, 3, 0, 1, 0, 2, 1, 2, 1, 1, 0, 1, 0, 2, 0, 1, 0, 1, 0, 3, 0, 2, 3, 2, 0, 2, 0, 3, 0, 2, 3, 2, 1, 3, 0, 1, 0, 2, 1, 2, 1, 1, 0, 1, 0, 3, 0, 0, 2, 0, 3, 0, 2, 0, 3, 0, 1, 0, 3, 0, 2, 0, 3, 0, 1, 0, 3, 0, 3, 0, 3, 0, 1, 0, 3, 0, 1, 0, 3, 0, 2, 0, 3, 0, 2, 0, 3, 0, 1, 0, 3, 0, 2, 0, 3, 0, 1, 0, 3, 0, 3, 0, 3, 0, 1, 0, 0, 2, 0, 0, 3, 0, 2, 0, 3, 0, 1, 0, 3, 0, 2, 0, 1, 0, 0, 3, 0, 3, 0, 3, 0, 1, 0, 3, 0, 1, 0, 2, 0, 0, 2, 0, 2, 0, 1, 0, 0, 3, 0, 3, 0, 2, 0, 0, 0, 0

# KING - adapted from https://onlinesequencer.net/1943749
song3:			.byte	84, 0, 0, 91, 0, 90, 0, 89, 0, 87, 0, 86, 0, 84, 0, 83, 0, 84, 0, 83, 0, 84, 0, 83, 0, 0, 0, 0, 84, 0, 0, 91, 0, 90, 0, 89, 0, 87, 0, 86, 0, 84, 0, 84, 0, 86, 0, 87, 0, 89, 0, 90, 0, 0, 91, 0, 84, 0, 0, 91, 0, 90, 0, 89, 0, 87, 0, 86, 0, 84, 0, 83, 0, 84, 0, 83, 0, 84, 0, 83, 0, 0, 0, 84, 0, 0, 91, 0, 90, 0, 89, 0, 87, 0, 86, 0, 84, 0, 84, 0, 86, 0, 87, 0, 89, 0, 90, 0, 0, 91, 0, 84, 0, 0, 91, 0, 90, 0, 89, 0, 87, 0, 86, 0, 84, 0, 83, 0, 84, 0, 83, 0, 84, 0, 79, 0, 0, 79, 0, 84, 0, 0, 79, 0, 79, 0, 0, 77, 0, 0, 75, 0, 80, 0, 0, 79, 0, 0, 75, 0, 0, 77, 0, 0, 77, 0, 70, 0, 70, 0, 0, 70, 0, 70, 0, 0, 67, 0, 70, 0, 72, 0, 0, 79, 0, 0, 84, 0, 0, 79, 0, 0, 87, 0, 0, 77, 0, 0, 77, 0, 80, 0, 0, 
				79, 0, 0, 75, 0, 0, 77, 0, 0, 77, 0, 70, 0, 70, 0, 0, 70, 0, 70, 0, 0, 67, 0, 70, 0, 0, 72, 0, 0, 71, 0, 0, 79, 0, 80, 0, 79, 79, 75, 0, 79, 79, 80, 0, 79, 79, 75, 0, 79, 79, 82, 0, 79, 79, 80, 0, 79, 79, 82, 0, 79, 0, 79, 0, 80, 0, 79, 79, 75, 0, 79, 79, 80, 0, 79, 79, 75, 0, 79, 79, 79, 79, 79, 79, 77, 77, 75, 75, 74, 74, 70, 0, 79, 0, 80, 0, 79, 79, 75, 0, 79, 79, 80, 0, 79, 79, 75, 0, 79, 79, 82, 0, 79, 79, 80, 0, 79, 79, 82, 0, 75, 0, 79, 0, 80, 0, 79, 79, 75, 0, 79, 79, 80, 0, 79, 79, 80, 0, 83, 83, 0, 79, 79, 0, 83, 83, 0, 86, 86, 0, 86
# Generated with [3*(x % 10)+2 if x > 0 else 0 for x in a]
song3_objects:		.byte	13, 0, 0, 4, 0, 1, 0, 28, 0, 22, 0, 19, 0, 13, 0, 10, 0, 13, 0, 10, 0, 13, 0, 10, 0, 0, 0, 0, 13, 0, 0, 4, 0, 1, 0, 28, 0, 22, 0, 19, 0, 13, 0, 13, 0, 19, 0, 22, 0, 28, 0, 1, 0, 0, 4, 0, 13, 0, 0, 4, 0, 1, 0, 28, 0, 22, 0, 19, 0, 13, 0, 10, 0, 13, 0, 10, 0, 13, 0, 10, 0, 0, 0, 13, 0, 0, 4, 0, 1, 0, 28, 0, 22, 0, 19, 0, 13, 0, 13, 0, 19, 0, 22, 0, 28, 0, 1, 0, 0, 4, 0, 13, 0, 0, 4, 0, 1, 0, 28, 0, 22, 0, 19, 0, 13, 0, 10, 0, 13, 0, 10, 0, 13, 0, 28, 0, 0, 28, 0, 13, 0, 0, 28, 0, 28, 0, 0, 22, 0, 0, 16, 0, 1, 0, 0, 28, 0, 0, 16, 0, 0, 22, 0, 0, 22, 0, 1, 0, 1, 0, 0, 1, 0, 1, 0, 0, 22, 0, 1, 0, 7, 0, 0, 28, 0, 0, 13, 0, 0, 28, 0, 0, 22, 0, 0, 22, 0, 0, 22, 0, 1, 0, 0, 28, 0, 0, 16, 0, 0, 22, 
				0, 0, 22, 0, 1, 0, 1, 0, 0, 1, 0, 1, 0, 0, 22, 0, 1, 0, 0, 7, 0, 0, 4, 0, 0, 28, 0, 1, 0, 28, 28, 16, 0, 28, 28, 1, 0, 28, 28, 16, 0, 28, 28, 7, 0, 28, 28, 1, 0, 28, 28, 7, 0, 28, 0, 28, 0, 1, 0, 28, 28, 16, 0, 28, 28, 1, 0, 28, 28, 16, 0, 28, 28, 28, 28, 28, 28, 22, 22, 16, 16, 13, 13, 1, 0, 28, 0, 1, 0, 28, 28, 16, 0, 28, 28, 1, 0, 28, 28, 16, 0, 28, 28, 7, 0, 28, 28, 1, 0, 28, 28, 7, 0, 16, 0, 28, 0, 1, 0, 28, 28, 16, 0, 28, 28, 1, 0, 28, 28, 1, 0, 10, 10, 0, 28, 28, 0, 10, 10, 0, 19, 19, 0, 19

song3_object_type:	.byte	3, 0, 0, 1, 0, 3, 0, 2, 0, 3, 0, 2, 0, 3, 0, 2, 0, 3, 0, 2, 0, 3, 0, 2, 0, 0, 0, 0, 3, 0, 0, 1, 0, 3, 0, 2, 0, 3, 0, 2, 0, 3, 0, 3, 0, 2, 0, 3, 0, 2, 0, 3, 0, 0, 1, 0, 3, 0, 0, 1, 0, 3, 0, 2, 0, 3, 0, 2, 0, 3, 0, 2, 0, 3, 0, 2, 0, 3, 0, 2, 0, 0, 0, 3, 0, 0, 1, 0, 3, 0, 2, 0, 3, 0, 2, 0, 3, 0, 3, 0, 2, 0, 3, 0, 2, 0, 3, 0, 0, 1, 0, 3, 0, 0, 1, 0, 3, 0, 2, 0, 3, 0, 2, 0, 3, 0, 2, 0, 3, 0, 2, 0, 3, 0, 1, 0, 0, 1, 0, 3, 0, 0, 1, 0, 1, 0, 0, 2, 0, 0, 3, 0, 2, 0, 0, 1, 0, 0, 3, 0, 0, 2, 0, 0, 2, 0, 1, 0, 1, 0, 0, 1, 0, 1, 0, 0, 1, 0, 1, 0, 3, 0, 0, 1, 0, 0, 3, 0, 0, 1, 0, 0, 3, 0, 0, 2, 0, 0, 2, 0, 2, 0, 0, 1, 0, 0, 3, 0, 0, 2, 0, 0, 2, 0, 1, 0, 1, 0, 0, 1, 0, 1, 0, 0, 1, 0, 1, 0, 0, 3, 0, 0,
				2, 0, 0, 1, 0, 2, 0, 1, 1, 3, 0, 1, 1, 2, 0, 1, 1, 3, 0, 1, 1, 1, 0, 1, 1, 2, 0, 1, 1, 1, 0, 1, 0, 1, 0, 2, 0, 1, 1, 3, 0, 1, 1, 2, 0, 1, 1, 3, 0, 1, 1, 1, 1, 1, 1, 2, 2, 3, 3, 2, 2, 1, 0, 1, 0, 2, 0, 1, 1, 3, 0, 1, 1, 2, 0, 1, 1, 3, 0, 1, 1, 1, 0, 1, 1, 2, 0, 1, 1, 1, 0, 3, 0, 1, 0, 2, 0, 1, 1, 3, 0, 1, 1, 2, 0, 1, 1, 2, 0, 2, 2, 0, 1, 1, 0, 2, 2, 0, 2, 2, 0, 2

song4:			.byte	-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1
song4_objects:		.byte	-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1
song4_object_type:	.byte	 4, 5, 4, 5, 4, 5, 4, 5, 4, 5, 4, 5, 4, 5, 4, 5, 4, 5, 4, 5, 4, 5, 4, 5, 4, 5, 4, 5, 4, 5, 4, 5

object_locations:	.byte	0:32	# up to 8 objects on screen, each with padding to allow indexing by shifting, x,y coordinates, and obj type. eg. struct{_, X, Y, type}[8]
powerup_location:	.byte	0:3	# stores x,y coords and type for a single powerup
song_props:		.half	0:3	# store song-specific settings: length, note duration, frames per note, 
song_addresses:		.word	0:3	# stores note array address, object array address, obj type array address
# alternate game over screen, not used
game_over_screen1:	.byte	

game_over_screen2:	.byte	


song_select_screen1:	.byte	0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 69, -42, -6, -6, -22, 83, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -66, -64, 53, 0, 0, 0, 0, -21, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -68, -51, 79, 0, 0, 0, -71, -1, -1, -51, 0, -108, -9, -5, -33, 64, 0, -91, -11, -13, -9, 61, 0, 75, -38, -6, -30, 79, 0, 0, 0, 0, 61, -59, -18, -17, -66, 22, 0, -21, 0, 0, 0, 0, 0, 42, -50, -101, 85, -18, 104, 71, -21, 61, 0, -58, -87, 46, -93, -67, 0, 0, 0, 0, 0, 0, 0, 81, -28, -107, 0, -21, 0, 0, 0, -127, -32, -10, -2, -91, -121, -51, 0, 0, -27, 61, 0, -33, -1, -1, -1, -44, 0, 0, 0, 0, -62, -101, 71, 86, -33, -122, 0, -17, 77, 0, 0, -34, -90, 88, -59, -91, 102, -23, 75, 102, -17, 61, 0, -56, -90, 46, 0, 0, 0, 0, 0, 0, -102, -23, -5, -13, -72, 0, 0, -64, -5, -60, 0, -91, -7, -13, -28, -91, 0, -63, -6, -24, -14, 50, 0, 79, -39, -6, -10, -79, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 108, -23, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -42, -3, -15, -107, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 115, -46, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -66, -10, -5, -17, -114, 0, 0, 0, 0, 0, 0, 115, -46, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -115, -34, 79, 0, 0, 0, 0, 0, 0, 0, 0, 0, 115, -46, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -42, 110, 0, 0, 0, 0, -119, -25, 104, 0, 0, 0, 0, 121, -23, -6, -51, 0, 115, -46, 0, 121, -23, -6, -51, 0, 13, -58, -9, -10, -101, -123, -1, -1, -17, 0, 0, 0, 0, -81, -24, -12, -46, 79, 0, -29, 126, 53, -53, -118, 115, -46, 0, -29, 126, 53, -53, -118, -101, -40, 71, 0, 0, 0, -42, 110, 0, 0, 0, 0, 0, 0, 0, 46, -56, -60, 13, -2, -1, -1, -1, -86, 115, -46, 13, -2, -1, -1, -1, -86, -69, -97, 0, 0, 0, 0, -42, 110, 0, 0, 0, 0, -93, -76, 92, 61, -62, -70, 0, -28, 125, 28, 0, 0, 115, -46, 0, -28, 125, 28, 0, 0, -98, -42, 66, 0, 0, 0, -45, -110, 0, 0, 0, 0, 117, -34, -8, -9, -46, 59, 0, 124, -25, -5, -14, -122, 115, -46, 0, 124, -25, -5, -14, -122, 22, -52, -7, -9, -101, 0, -105, -8, -25, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0

song_select_screen2:	.byte	0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -1, -1, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -1, 0, 0, 0, -1, 0, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -1, 0, 0, 0, 0, -1, -1, -1, -1, 0, 0, -1, -1, -1, 0, 0, -1, -1, -1, 0, 0, 0, -1, -1, -1, 0, 0, 0, 0, 0, 0, 0, 0, -1, -1, -1, 0, 0, -1, 0, 0, 0, 0, 0, 0, -1, 0, -1, 0, 0, -1, 0, 0, -1, 0, 0, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -1, 0, -1, 0, 0, 0, 0, -1, -1, -1, 0, -1, 0, 0, -1, 0, 0, -1, -1, -1, -1, 0, 0, 0, 0, 0, 0, 0, -1, 0, 0, 0, -1, 0, -1, 0, 0, 0, -1, 0, 0, -1, 0, -1, 0, 0, -1, 0, 0, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -1, -1, -1, 0, 0, 0, -1, -1, 0, 0, -1, -1, -1, 0, 0, -1, -1, -1, 0, 0, 0, -1, -1, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -1, -1, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -1, -1, -1, 0, 0, 0, 0, 0, 0, 0, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -1, 0, 0, 0, 0, 0, 0, 0, 0, -1, 0, 0, 0, 0, 0, 0, -1, -1, 0, 0, -1, 0, 0, -1, -1, 0, 0, 0, -1, -1, -1, -1, -1, -1, -1, 0, 0, 0, 0, 0, 0, 0, -1, -1, -1, 0, 0, -1, 0, 0, -1, 0, -1, 0, -1, 0, 0, -1, 0, -1, 0, 0, 0, 0, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -1, 0, -1, -1, -1, -1, 0, -1, 0, -1, -1, -1, -1, 0, -1, 0, 0, 0, 0, -1, 0, 0, 0, 0, 0, 0, 0, 0, -1, 0, 0, 0, -1, 0, -1, 0, 0, 0, 0, -1, 0, -1, 0, 0, 0, 0, -1, 0, 0, 0, 0, -1, 0, 0, 0, 0, 0, 0, 0, 0, -1, -1, -1, -1, 0, 0, 0, -1, -1, -1, 0, -1, 0, 0, -1, -1, -1, 0, 0, -1, -1, -1, 0, -1, -1, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
.text

######## Macros

# Load 0s into colour registers and jump to draw call if arg $a2 != 0
# Otherwise, jump to load_colours
# Can be simplified to 1 param version if load_colours is before macro, but this is slower in runtime
.macro check_undraw (%draw_label, %load_colours)
	beqz $a2, %load_colours
	move $t1, $zero
	move $t2, $zero
	move $t3, $zero
	j %draw_label
.end_macro


# Takes x,y coordinates in $a0, $a1, and puts the address of that pixel in $t0
# Note: overwrites $t1
.macro xy_address
	sll $a0, $a0, 2			# 4 bytes
	sll $a1, $a1, 2
	addi $t0, $a0, FRAME_BUFFER	# frame buffer + x offset -> $t0
	mul $t1, $a1, SCREEN_WIDTH	# calculate y-offset
	add $t0, $t1, $t0		# store frame buffer address for object in $t0
.end_macro
	
	
# pop from stack into register reg
.macro pop_stack (%reg)
	lw %reg, 0($sp)
	addi $sp, $sp, 4
.end_macro

# push onto stack
.macro push_stack (%reg)
	addi $sp, $sp, -4 
	sw %reg, 0($sp)
.end_macro


.globl main


## Saved registers for main/game:
# s0: music note index
# s1: frames since last note
# s2: note duration	# unused
# s3: song length	# unused
# s4: shield state
# s5: ship health
# s6: ship X coordinate
# s7: ship Y coordinate

main:
song_select:
	jal play_stage_select_note	# Warm up the MARS sound implementation so the start of the song isn't distorted
	jal clear_screen	# faster than calling draw_screen with an array of 0s
	li $s0, 0		# song selection
	li $s6, 16	# initial X
	li $s7, 40	# initial Y
	
	# randomly select between anti-aliased and aliased song select screen
	li $v0, 42	
	li $a0, 0	# always use 1st random instance
	li $a1, NUM_SONG_SELECT_SCREENS	# generate num in range
	syscall
	beq $a0, 0, song_select_screen_1
	beq $a0, 1, song_select_screen_2
	j end	# error
song_select_screen_1:
	la $a0, song_select_screen1
	j song_select_screen_draw
song_select_screen_2:
	la $a0, song_select_screen2
song_select_screen_draw:
	jal draw_screen
	la $t1, FRAME_BUFFER
	addi $t1, $t1, 4480	# 4 bytes * 32 px per line * 35 lines
	li $t0, SONG1_COLOUR
	sw $t0, 28($t1)		# 7th pixel
	li $t0, SONG2_COLOUR
	sw $t0, 52($t1)		# 13th pixel
	li $t0, SONG3_COLOUR
	sw $t0, 76($t1)		# 19th pixel
	li $t0, SONG4_COLOUR
	sw $t0, 100($t1)	# 25th pixel
song_select_loop:
	# check for input
	li $t9, INPUT_BUFFER 
	lw $t8, 0($t9)
	bne $t8, 1, song_select_draw_ship
	lw $t8, 4($t9)
	beq $t8, 0x61, song_select_prev		# ASCII code of 'a'
	beq $t8, 0x64, song_select_next		# ASCII code of 'd'
	beq $t8, 0x73, load_song_data		# ASCII code of 's'
	beq $t8, 0x77, load_song_data		# ASCII code of 'w'	
	beq $t8, 0x70, main			# ASCII code of 'p' - we want to be able to restart
song_select_next:
	bge $s0, LAST_SONG_INDEX, song_select_draw_ship	# stay in range [0, max_songs]
	addi $s0, $s0, 1
	jal play_stage_select_note	# play note when moving
	j song_select_draw_ship
song_select_prev:
	blez $s0, song_select_draw_ship			# stay in range [0, max_songs]
	addi $s0, $s0, -1
	jal play_stage_select_note	# play note when moving
	
song_select_draw_ship:
	# undraw ship at current position
	move $a0, $s6		# move x into param 1
	move $a1, $s7		# move y into param 2
	move $a2, $s6		# move True into param 3: undraw
	jal draw_ship
	li $t1, 6		# space between songs
	mul $s6, $t1, $s0	# update X coord by checking current song num
	addi $s6, $s6, 6	# add offset from edge of screen
	# draw ship at new position
	move $a0, $s6		# move x into param 1
	move $a1, $s7		# move y into param 2
	move $a2, $zero		# move False into param 3: undraw
	jal draw_ship
	jal pause
	j song_select_loop
load_song_data:			# load song data into arrays
	beq $s0, 0, load_song1
	beq $s0, 1, load_song2
	beq $s0, 2, load_song3
	beq $s0, 3, load_song4
	j end	# error
load_song1:			
	li $t1, SONG1_LENGTH
	sh $t1, song_props+0
	li $t2, SONG1_NOTE_DURATION
	sh $t2, song_props+2
	li $t3, SONG1_FRAMES_PER_NOTE
	sh $t3, song_props+4
	la $t4, song1
	sw $t4, song_addresses+0
	la $t5, song1_objects
	sw $t5, song_addresses+4
	la $t6, song1_object_type
	sw $t6, song_addresses+8
	j game
load_song2:
	li $t1, SONG2_LENGTH
	sh $t1, song_props+0
	li $t2, SONG2_NOTE_DURATION
	sh $t2, song_props+2
	li $t3, SONG2_FRAMES_PER_NOTE
	sh $t3, song_props+4
	la $t4, song2
	sw $t4, song_addresses+0
	la $t5, song2_objects
	sw $t5, song_addresses+4
	la $t6, song2_object_type
	sw $t6, song_addresses+8
	j game
load_song3:
	li $t1, SONG3_LENGTH
	sh $t1, song_props+0
	li $t2, SONG3_NOTE_DURATION
	sh $t2, song_props+2
	li $t3, SONG3_FRAMES_PER_NOTE
	sh $t3, song_props+4
	la $t4, song3
	sw $t4, song_addresses+0
	la $t5, song3_objects
	sw $t5, song_addresses+4
	la $t6, song3_object_type
	sw $t6, song_addresses+8
	j game
load_song4:
	li $t1, SONG4_LENGTH
	sh $t1, song_props+0
	li $t2, SONG4_NOTE_DURATION
	sh $t2, song_props+2
	li $t3, SONG4_FRAMES_PER_NOTE
	sh $t3, song_props+4
	la $t4, song4
	sw $t4, song_addresses+0
	la $t5, song4_objects
	sw $t5, song_addresses+4
	la $t6, song4_object_type
	sw $t6, song_addresses+8
	j game

game:
	jal clear_screen
	li $s0, 0 		# init note index iterator
	li $s1, 0		# init number of frames since last note
	#li $s2, 		# note duration - CURRENTLY NOT USED
	#li $s3, 		# song length - CURRENTLY NOT USED
	li $s4, 0		# init to no shield
	li $s5, INITIAL_HEALTH	# Init ship health
	li $s6, 14		# init ship X 
	li $s7, 50		# init ship Y
	
	# clear objects buffer
	li $t0, 31
clear_objects_loop:
	sb $zero, object_locations($t0)
	addi $t0, $t0, -1
	bgez $t0, clear_objects_loop


	# clear powerup too
	sb $zero, powerup_location+0
	sb $zero, powerup_location+1
	sb $zero, powerup_location+2

	# draw ship at initial position
	move $a0, $s6
	move $a1, $s7
	move $a2, $zero
	jal draw_ship

loop:
	# check for key input and handle it if necessary
	li $t9, INPUT_BUFFER 
	lw $t8, 0($t9)
	bne $t8, 1, loop_no_input
	lw $a0, 4($t9) 			# this assumes $t9 is set to 0xfff0000 from before
	jal handle_input
loop_no_input:
	# draw ship at possibly updated coordinates
	move $a0, $s6		# move x into param 1
	move $a1, $s7		# move y into param 2
	move $a2, $zero		# move False into param 3: undraw
	jal draw_ship


loop_music:		
	# Play notes of song
	lh $t7, song_props+4	# load frames per note
	blt $s1, $t7, loop_end	# don't play note if enough frames haven't passed
	move $s1, $zero					# reset frame counter
	lh $t7, song_props+0	# load song length
	blt $s0, $t7, loop_music_continue 	# play next note - don't reset to start 
	move $s0, $zero					# reset to start of song
	jal drop_powerup				# drop powerup when song loops
loop_music_continue:
	# play a note from the song
	lw $t7, song_addresses+0	# load song address
	add $t7, $t7, $s0		# load current note address
	lb $a0, 0($t7)			# load note
	beqz $a0, loop_empty_note	# if note is 0, dont play it or drop an object
	beq $a0, -1, loop_silent_note	# if note is -1, dont play it butdo drop an object
	lh $a1, song_props+2		# load note duration into argument
	jal play_single_note		# play note if pitch is not 0
loop_silent_note:
	# drop an object at each note
	lw $t7, song_addresses+4		# load song objects address
	add $t7, $t7, $s0			# load current object address
	lb $a0, ($t7)				# load X coordinate
	lw $t7, song_addresses+8		# load object type address
	add $t7, $t7, $s0			# load current object type address
	lb $a1, ($t7)				# load obj type
	move $a2, $s0				# load note index
	jal drop_object
loop_empty_note:
	addi $s0, $s0, 1		# increment note index
loop_end:
	# do miscellaneous end-of-loop tasks
	jal move_objects	# Move objects downwards, remove finished ones, check collisions
				# This could be considered bad design but I don't want to loop over the game objects 3 times in 3 different functions
	jal move_powerup
	jal check_powerup_collision	
	jal draw_hp		# draw HP on screen
	blez $s4, loop_no_shield
	addi $s4, $s4, -1	# decrement shield duration each frame
loop_no_shield:
	blez $s5, game_over	# check for game over
	jal pause 		# pause until next frame
	addi $s1, $s1, 1	# increment frame counter
	j loop			# keep looping
	
end:	li $v0, 10 		# terminate the program gracefully
	syscall

game_over:
	la $a0, game_over_screen2
	jal draw_screen
	move $a0, $s6
	move $a1, $s7
	jal ship_explode
	jal pause
	# check for P and handle it if necessary
	li $t9, INPUT_BUFFER 
	lw $t8, 0($t9)
	bne $t8, 1, game_over
	lw $t8, 4($t9)
	beq $t8, 0x70, main		# ASCII code of 'p'
	j game_over			# keep looping until p is pressed

######## Functions - call these with jal

# play stage not in stage selection menu. No params.
play_stage_select_note:
	li $a0, STAGE_SELECT_PITCH
	li $a1, STAGE_SELECT_DURATION 
	j play_single_note

# Draw HP at the top of the screen
# Called from main so ship HP is in $s5, shield status in $s4
draw_hp:
	sll $t0, $s5, 3		# shift current HP iterator twice for word, once for 1-pixel gap
	addi $t0, $t0, 124	# draw on 2nd line: 124=(32-1)*4
	li $t2, MAX_HEALTH	# init max HP iterator for undraw loop
	sll $t2, $t2, 3		# shift max HP twice for word, once for 1-pixel gap
	addi $t2, $t2, 124	# draw on 2nd line
	li $t3, 0x000000	
	blez $s4, no_shield	# choose HP colout based on shield status
	li $t1, HP_COLOUR2
	j draw_hp_undraw_loop
no_shield:
	li $t1, HP_COLOUR1
draw_hp_undraw_loop:		# this might actually be faster than a single loop - O(1) vs. O(n) jumps
	sw $t3, FRAME_BUFFER($t2)	# undraw pixels
	addi $t2, $t2, -8	# move 2 pixels left
	bgt $t2, $t0, draw_hp_undraw_loop
draw_hp_loop:
	sw $t1, FRAME_BUFFER($t0)	# draw HP
	addi $t0, $t0, -8	# move 2 pixels left
	bgt $t0, 124, draw_hp_loop
	jr $ra

# pause between notes.
pause:
	li $a0, FRAME_DELAY
	li $v0, 32
	syscall
	jr $ra


# params: $a0: key input, $s6: ship X, $s7: ship Y
# s6 and s7 are treated as globals that may be mutated by this function
handle_input:
	beq $a0, 0x61, ship_move_left		# ASCII code of 'a' is 0x61 or 97 in decimal
	beq $a0, 0x73, ship_move_down		# ASCII code of 's'
	beq $a0, 0x77, ship_move_up		# ASCII code of 'w'
	beq $a0, 0x64, ship_move_right		# ASCII code of 'd'
	beq $a0, 0x70, main			# ASCII code of 'p'
	jr $ra					# Else, ignore input
ship_move_left:
	blez $s6, handle_input_return	# if ship at left edge, pass
	push_stack ($ra)	# save return address pointer
	# undraw ship at current position
	move $a0, $s6		# move x into param 1
	move $a1, $s7		# move y into param 2
	move $a2, $s6		# move True into param 3: undraw
	jal draw_ship
	addi $s6, $s6, -1	# update global coords
	pop_stack ($ra)
	jr $ra
ship_move_right:
	bge $s6, 29, handle_input_return	# if ship at right edge, pass
	push_stack ($ra)	# save return address pointer
	# undraw ship at current position
	move $a0, $s6		# move x into param 1
	move $a1, $s7		# move y into param 2
	li $a2, 1		# move True into param 3: undraw
	jal draw_ship
	addi $s6, $s6, 1	# update global coords
	pop_stack ($ra)
	jr $ra
ship_move_down:
	bge $s7, 62, handle_input_return	# if ship at lower edge, pass
	push_stack ($ra)	# save return address pointer
	# undraw ship at current position
	move $a0, $s6		# move x into param 1
	move $a1, $s7		# move y into param 2
	li $a2, 1		# move True into param 3: undraw
	jal draw_ship
	addi $s7, $s7, 1	# update global coords
	pop_stack ($ra)
	jr $ra
ship_move_up:
	blez $s7, handle_input_return	# if ship at upper edge, pass
	push_stack ($ra)	# save return address pointer
	# undraw ship at current position
	move $a0, $s6		# move x into param 1
	move $a1, $s7		# move y into param 2
	li $a2, 1		# move True into param 3: undraw
	jal draw_ship
	addi $s7, $s7, -1	# update global coords
	pop_stack ($ra)
	jr $ra
handle_input_return:
	jr $ra
	
# Clear the screen. No params.
clear_screen:
	li $t1, SCREEN_WIDTH
	mul $t1, $t1, SCREEN_HEIGHT
	sll $t1, $t1, 2
	li $t0, FRAME_BUFFER	# load start address into $t0
	addi $t1, $t1, FRAME_BUFFER	# load final address into $t1
clear_screen_loop:
	sw $zero, 0($t0)		# clear pixel
	addi $t0, $t0, 4
	ble $t0, $t1, clear_screen_loop
	jr $ra
	
# Draw full screen using data from frame. Params: $a0: frame address
draw_screen:
	li $t1, SCREEN_WIDTH
	mul $t1, $t1, SCREEN_HEIGHT
	sll $t1, $t1, 2
	move $t4, $zero
	li $t0, FRAME_BUFFER		# load start address into $t0
	addi $t1, $t1, FRAME_BUFFER	# load final address into $t1
draw_screen_loop:
	add $t5, $t4, $a0		# Get pixel at offset 
	lbu $t2, ($t5)
	sll $t3, $t2, 8
	add $t3, $t3, $t2
	sll $t3, $t3, 8
	add $t3, $t3, $t2	# load value into all 3 colours by shifting and adding
	sw $t3, 0($t0)		# send pixel to frame buffer
	addi $t0, $t0, 4
	addi $t4, $t4, 1
	ble $t0, $t1, draw_screen_loop
	jr $ra
	
# animation of ship exploding. Params: ship coords in a0,a1
ship_explode:		# frame 1
	move $t4, $a0	# store x
	move $t5, $a1	# store y
	xy_address	# overwrites a0, a1
	li $t1, SHIP_EXPLODE1
	li $t2, SHIP_EXPLODE2
	li $t3, SHIP_EXPLODE3	
	sw $t1, 0($t0)
	sw $t1, 4($t0)		
	sw $t1, 128($t0)
	sw $t3, 132($t0)		
	sw $t2, 136($t0)
	sw $t2, 260($t0)
	li $a0, SHIP_EXPLODE_ANIMATION_DELAY
	li $v0, 32
	syscall
	# check for P and handle it if necessary
	li $t9, INPUT_BUFFER 
	lw $t8, 4($t9)
	beq $t8, 0x70, main		# ASCII code of 'p'
	sw $t3, 0($t0)			# draw frame 2
	sw $t2, 4($t0)		
	sw $t3, 8($t0)
	sw $t1, 128($t0)
	sw $t3, 132($t0)		
	sw $t2, 136($t0)
	sw $t3, 260($t0)		
	sw $t1, 264($t0)
	li $a0, SHIP_EXPLODE_ANIMATION_DELAY
	li $v0, 32
	syscall
	# check for P and handle it if necessary
	li $t9, INPUT_BUFFER 
	lw $t8, 4($t9)
	beq $t8, 0x70, main		# ASCII code of 'p'
	sw $t2, -128($t0)		# start drawing frame 3
	sw $t2, -124($t0)
	sw $t3, 0($t0)		
	sw $t3, 4($t0)		
	sw $t2, 8($t0)
	sw $t2, 128($t0)
	sw $t3, 132($t0)
	sw $t2, 136($t0)
	sw $t3, 256($t0)
	sw $t2, 260($t0)		
	sw $t2, 264($t0)
	ble $t4, 0, ship_explode_done_draw
	sw $t1, -132($t0)
	sw $t3, -4($t0)
	sw $t1, 124($t0)
	bge $t4, 29, ship_explode_done_draw	# don't draw whole explosion when ship is at edge
	sw $t1, 12($t0)
	sw $t1, 140($t0)
	sw $t2, 268($t0)
	bge $t4, 27, ship_explode_done_draw
	sw $t1, 148($t0)
ship_explode_done_draw:
	li $a0, SHIP_EXPLODE_ANIMATION_DELAY
	li $v0, 32
	syscall
	jr $ra
	
# draw the ship at the specified coordinates
# if $a2 != 0, draw background pixels instead
# params: $a0: x, $a1: y, $a2: undraw
# x < 30, y < 63 - leave space for ship, never draw it on the edge
draw_ship:
	xy_address
	check_undraw (draw_ship_draw, draw_ship_colours)
draw_ship_colours:
	li $t1, SHIP_COLOUR1
	li $t2, SHIP_COLOUR2
draw_ship_draw:
	sw $t2, 0($t0)		
	sw $t2, 8($t0)
	sw $t2, 128($t0)
	sw $t1, 132($t0)		
	sw $t2, 136($t0)		
	
	# larger ship design, not used
#	li $t3, SHIP_COLOUR3
#	sw $t2, 4($t0)		
#	sw $t2, 12($t0)
#	sw $t2, 128($t0)
#	sw $t2, 132($t0)		
#	sw $t1, 136($t0)		
#	sw $t2, 140($t0)
#	sw $t2, 144($t0)
#	sw $t3, 260($t0)
#	sw $t3, 268($t0)
	jr $ra



# enemy 4 and 5 appear the same as enemy 1 (small asteroid)
draw_enemy4:
draw_enemy5:
# draw the small enemy at the specified coordinates
# params: $a0: x, $a1: y, $a2: undraw
# x < 30, y < 61 - leave space, never draw it on the edge
draw_enemy1:
	xy_address
	check_undraw (draw_enemy1_draw, draw_enemy1_colours)
draw_enemy1_colours:
	li $t1, ENEMY_COLOUR1
	li $t2, ENEMY_COLOUR2
draw_enemy1_draw:
	sw $t1, 4($t0)		
	sw $t1, 128($t0)
	sw $t2, 132($t0)		
	sw $t1, 136($t0)
	sw $t1, 260($t0)
	jr $ra
	

# draw the large enemy at the specified coordinates
# params: $a0: x, $a1: y, $a2: undraw
# x < 29, y < 60 - leave space, never draw it on the edge
draw_enemy2:
	xy_address
	check_undraw (draw_enemy2_draw, draw_enemy2_colours)
draw_enemy2_colours:
	li $t1, ENEMY_COLOUR1
	li $t2, ENEMY_COLOUR2
	li $t3, ENEMY_COLOUR3
draw_enemy2_draw:
	sw $t3, 4($t0)
	sw $t3, 8($t0)		
	sw $t3, 128($t0)
	sw $t1, 132($t0)		
	sw $t2, 136($t0)
	sw $t3, 140($t0)		
	sw $t3, 256($t0)
	sw $t2, 260($t0)
	sw $t1, 264($t0)
	sw $t3, 268($t0)
	sw $t3, 388($t0)
	sw $t3, 392($t0)
	jr $ra
	
# draw the medium enemy at the specified coordinates
# params: $a0: x, $a1: y
# x < 30, y < 61 - leave space, never draw it on the edge
draw_enemy3:
	xy_address
	check_undraw (draw_enemy3_draw, draw_enemy3_colours)
draw_enemy3_colours:
	li $t1, ENEMY_COLOUR1
	li $t2, ENEMY_COLOUR2
	li $t3, ENEMY_COLOUR3
draw_enemy3_draw:
	sw $t3, -128($t0)	
	sw $t3, -124($t0)		
	sw $t1, -120($t0)
	sw $t3, -4($t0)	
	sw $t2, 0($t0)	
	sw $t2, 4($t0)		
	sw $t2, 8($t0)
	sw $t3, 12($t0)
	sw $t1, 124($t0)
	sw $t3, 128($t0)
	sw $t2, 132($t0)		
	sw $t1, 136($t0)
	sw $t1, 140($t0)
	sw $t3, 256($t0)
	sw $t1, 260($t0)
	sw $t3, 264($t0)
	jr $ra

# draw the powerup at the specified coordinates
# params: $a0: x, $a1: y, $a2: undraw, $a3: powerup type: 1 or 2
# x < 32, y < 62
draw_powerup:
	xy_address
	check_undraw (draw_powerup_draw, draw_powerup_colours)
draw_powerup_colours:
	beq $a3, 1, draw_powerup1_colours
	beq $a3, 2, draw_powerup2_colours
	j end	# error
draw_powerup1_colours:
	li $t1, POWERUP_COLOUR1
	j draw_powerup_draw
draw_powerup2_colours:
	li $t1, POWERUP_COLOUR2
draw_powerup_draw:
	sw $t1, 0($t0)	# draw single pixel powerup
	jr $ra
	
	
# play single note (async). params $a0: pitch, $a1: note duration
play_single_note:
	li $a2, INSTRUMENT
	li $a3, AUDIO_VOLUME
	li $v0, 31		# play MIDI async
	syscall
	jr $ra			# return
	
# Assume this gets called by main loop, ie. ship x,y in $s6,$s7
# Modify ship current health, ie. $s5
# Check current shield status from $s4
# params: $s4-$s7, $a0,$a1,$a2: obj x,y,type
check_collision:
# Calculate the Manhattan distance (one-norm) between x1,y1 and x2,y2 ($a0,$a1, $s6,$s7) and store in $v0
distance:
	addi $t2, $s6, -1	# shift center of ship to the left for better detection
				# Ship center is at top left, and we measure the distance from that to the top left of enemy objects
				# Shifting the ship left makes detection of objects larger than the ship more accurate.
	
	sub $v0, $a0, $t2
	abs $v0, $v0
	sub $v1, $a1, $s7
	abs $v1, $v1
	add $v0, $v0, $v1
	beq $a2, 1, check_collision_enemy1
	beq $a2, 2, check_collision_enemy2
	beq $a2, 3, check_collision_enemy3
	beq $a2, 4, check_collision_enemy4
	beq $a2, 5, check_collision_enemy5
	j end	# error

check_collision_enemy4:	# enemy 4 and 5 are enemy 1 with different movement patterns
check_collision_enemy5:
check_collision_enemy1:
	blt $v0, 3, on_collision
	jr $ra
check_collision_enemy2:
	blt $v0, 4, on_collision
	jr $ra
check_collision_enemy3:
	blt $v0, 5, on_collision
	jr $ra

on_collision:
	bgtz $s4, on_collision_return	# do nothing if shield is up
	subi $s5, $s5, COLLISION_DAMAGE
on_collision_return:
	jr $ra
	
# s4: shield status, s5: current health, s6: ship X, s7: ship Y
# increments s5 on collision with repair powerup
# sets s4 to full shield on collision with shield powerup
check_powerup_collision:
	lb $a2, powerup_location+2	# load type
	beqz $a2, check_powerup_collision_none	# if type == 0, ignore collisions
	lb $a0, powerup_location	# load X
	lb $a1, powerup_location+1	# load Y
	# Manhattan distance
	addi $t2, $s6, 1	# shift center of ship to the right for better detection
				# ship 'center' is normally at top left
	move $t3, $s7		# load Y
	sub $t2, $a0, $t2
	abs $t2, $t2
	sub $t3, $a1, $t3
	abs $t3, $t3
	add $t2, $t2, $t3
	bgt $t2, 3, check_powerup_collision_none	# distance > 3
	beq $a2, 1, check_powerup_collision_repair
	beq $a2, 2, check_powerup_collision_shield
	j end	# error
check_powerup_collision_repair:	
	bge $s5, MAX_HEALTH, remove_powerup_from_screen	# no overheal
	addi $s5, $s5, 3	# add HP
	j remove_powerup_from_screen
check_powerup_collision_shield:
	li $s4, SHIELD_FRAMES		# add full shield
	j remove_powerup_from_screen
remove_powerup_from_screen:
	li $a2, 1	# undraw powerup
	push_stack($ra)
	jal draw_powerup
	pop_stack($ra)
	sb $zero, powerup_location+2	# Clear powerup type
	sb $zero, powerup_location+1	# Clear powerup Y
	sb $zero, powerup_location	# Clear powerup X
check_powerup_collision_none:
	jr $ra
	
# move objects downwards and remove them once off-screen
# On collision, decrement HP
move_objects:
	push_stack($ra)
	push_stack($s0)
	push_stack($s1)
	push_stack($s2)
	push_stack($s3)
	li $s3, 31	# init iterator to last byte of last array item
move_objects_loop:
	lb $s2, object_locations($s3)	# load obj type
	addi $s3, $s3, -1	# decrement to Y coord
	lb $s1, object_locations($s3)	# load y coord
	move $a1, $s1			# move Y coord to parameter
	addi $s3, $s3, -1	# decrement to X coord
	lb $s0, object_locations($s3)	# load x coord
	move $a0, $s0			# move X coord to parameter

	beq $s2, 0, move_objects_loop_continue	# if obj type == 0, do nothing
	# check collisions
	move $a0, $s0	# load obj X
	move $a1, $s1	# load obj Y
	move $a2, $s2	# load obj type
	jal check_collision		# ship HP,X,Y in $s5-$s7

	li $a2, 1			# undraw first
	beq $s2, 1, move_object_enemy_1
	beq $s2, 2, move_object_enemy_2
	beq $s2, 3, move_object_enemy_3
	beq $s2, 4, move_object_enemy_4
	beq $s2, 5, move_object_enemy_5
	j end
move_object_enemy_1:
	jal draw_enemy1				# undraw
	bgt $s1, 64, move_objects_loop_despawn	# check for off-screen
	li $a2 0	# now draw
	move $a0, $s0	# reload x coord
	add $a1, $s1, OBJECT_SPEED	# move objects down towards ship - load new Y
	addi $s3, $s3, 1		# move to index of Y coord
	sb $a1, object_locations($s3)	# Save new Y coord of moved object
	addi $s3, $s3, -1		# move back to X coord
	jal draw_enemy1		# draw enemy in new location
	j move_objects_loop_continue
move_object_enemy_2:
	jal draw_enemy2				# undraw
	bgt $s1, 64, move_objects_loop_despawn	# check for off-screen
	li $a2 0	# now draw
	move $a0, $s0	# reload x coord
	add $a1, $s1, OBJECT_SPEED	# move objects down towards ship - load new Y
	addi $s3, $s3, 1		# move to index of Y coord
	sb $a1, object_locations($s3)	# Save new Y coord of moved object
	addi $s3, $s3, -1		# move back to X coord
	jal draw_enemy2		# draw enemy in new location
	j move_objects_loop_continue
move_object_enemy_3:
	jal draw_enemy3				# undraw
	bgt $s1, 64, move_objects_loop_despawn	# check for off-screen
	li $a2 0	# now draw
	move $a0, $s0	# reload x coord
	add $a1, $s1, OBJECT_SPEED	# move objects down towards ship - load new Y
	addi $s3, $s3, 1		# move to index of Y coord
	sb $a1, object_locations($s3)	# Save new Y coord of moved object
	addi $s3, $s3, -1		# move back to X coord
	jal draw_enemy3		# draw enemy in new location
	j move_objects_loop_continue

# enemy 4 moves diagonally
move_object_enemy_4:
	jal draw_enemy4				# undraw
	bgt $s1, 64, move_objects_loop_despawn	# check for off-screen
	li $a2 0	# now draw
	sub $a0, $s0, OBJECT_SPEED	# move to the left
	add $a1, $s1, OBJECT_SPEED	# move objects down towards ship - load new Y
	bge $a0, OBJECT_SPEED, move_object_enemy_4_no_edge	# if at edge, change direction
	li $t0, 5	# load other enemy type
	sb $t0, object_locations+2($s3)	# change object to enemy 5, which moves back to the right
move_object_enemy_4_no_edge:
	sb $a0, object_locations($s3)	# Save new X coord of moved object
	addi $s3, $s3, 1		# move to index of Y coord
	sb $a1, object_locations($s3)	# Save new Y coord of moved object
	addi $s3, $s3, -1		# move back to X coord
	jal draw_enemy4		# draw enemy in new location
	j move_objects_loop_continue

# enemy 5 moves diagonally
move_object_enemy_5:
	jal draw_enemy5				# undraw
	bgt $s1, 64, move_objects_loop_despawn	# check for off-screen
	li $a2 0	# now draw
	add $a0, $s0, OBJECT_SPEED	# move to the right
	add $a1, $s1, OBJECT_SPEED	# move objects down towards ship - load new Y
	ble $a0, 27, move_object_enemy_5_no_edge	# if at edge, change direction
	li $t0, 4	# load other enemy type
	sb $t0, object_locations+2($s3)	# change object to enemy 4, which moves back to the left
move_object_enemy_5_no_edge:
	sb $a0, object_locations($s3)	# Save new X coord of moved object
	addi $s3, $s3, 1		# move to index of Y coord
	sb $a1, object_locations($s3)	# Save new Y coord of moved object
	addi $s3, $s3, -1		# move back to X coord
	jal draw_enemy5		# draw enemy in new location
	j move_objects_loop_continue
move_objects_loop_despawn:
	sb $zero, object_locations($s3)	# unset X coord
	addi $s3, $s3, 1		# move to Y coord 
	sb $zero, object_locations($s3)	# unset Y coord
	addi $s3, $s3, 1		# move to obj type
	sb $zero, object_locations($s3)	# unset obj type
	addi $s3, $s3, -2		# move back to X coord 
	j move_objects_loop_continue
move_objects_loop_continue:
	addi $s3, $s3, -2	# decrement to next item
	bgez $s3, move_objects_loop
	pop_stack($s3)
	pop_stack($s2)
	pop_stack($s1)
	pop_stack($s0)
	pop_stack($ra)
	jr $ra
	
move_powerup:
	lb $t2, powerup_location+2	# powerup type
	bgtz $t2, move_powerup_exists
	jr $ra
move_powerup_exists:
	push_stack($ra)
	lb $a0, powerup_location	# load X
	lb $a1, powerup_location+1	# load Y
	li $a2, 1			# undraw: True
	# no need to choose powerup type for undraw
	jal draw_powerup
	lb $a0, powerup_location	# reload X
	lb $a1, powerup_location+1	# reload Y
	addi $a1, $a1, POWERUP_OBJECT_SPEED
	# check that powerup is still on screen
	blt $a1, 63, move_powerup_onscreen
	sb $zero, powerup_location+2	# store that no powerup exists
	pop_stack($ra)
	jr $ra
move_powerup_onscreen:
	sb $a1, powerup_location+1	# store updated Y
	move $a2, $zero			# undraw: False
	lb $a3, powerup_location+2	# load powerup type
	jal draw_powerup
	pop_stack($ra)
	jr $ra

# drop random powerup at random location	
# 2 types: 1 = repair, 2 = shield
drop_powerup:
	# get random X coord
	li $v0, 42	
	li $a0, 0	# always use 1st random instance
	li $a1, 31	# up to 31
	syscall
	sb $a0, powerup_location	# store X
	sb $zero, powerup_location+1	# store Y
	# get random type
	li $v0, 42	
	li $a0, 0	# always use 1st random instance
	li $a1, 2	# range [0,1]
	syscall
	addi $t0, $a0, 1	# powerup type [0,1] -> [1,2]
	sb $t0, powerup_location+2	# store type
	jr $ra
	
# drop object. param $a0: x coord, $a1: object type, $a2: note index
# if x coord is -1, drop at random location
drop_object:
	# calculate object array index to use (note index % 8)
	andi $t1, $a2, 7	# index mod 8
	sll $t1, $t1, 2		# mult. by 4 since each struct stores 4 bytes
	
	move $t0, $a1	# move obj type to temp register since we need a1 for the y coord
	bne $a0, -1, drop_object_not_random
	# get random X coord
	li $v0, 42	
	li $a0, 0	# always use 1st random instance
	li $a1, 31	# up to 31 - stored in $a0
	syscall
	li $a1, -4	# load y coord for draw - spawn object off screen
drop_object_not_random:
	addi $t1, $t1, 1		# move to x coord location (skip padding)
	sb $a0, object_locations($t1)	# store x coord
	addi $t1, $t1, 1		# move to y coord location
	sb $a1, object_locations($t1)	# store y coord
	addi $t1, $t1, 1		# move to obj type location
	sb $t0, object_locations($t1)	# store obj type
	li $a2, 0			# draw, not undraw
	push_stack($ra)
	beq $t0, 1, drop_object_enemy_1
	beq $t0, 2, drop_object_enemy_2
	beq $t0, 3, drop_object_enemy_3
	beq $t0, 4, drop_object_enemy_4
	beq $t0, 5, drop_object_enemy_5
	j end
drop_object_enemy_1:
	jal draw_enemy1
	pop_stack($ra)
	jr $ra
drop_object_enemy_2:
	jal draw_enemy2
	pop_stack($ra)
	jr $ra
drop_object_enemy_3:
	jal draw_enemy3
	pop_stack($ra)
	jr $ra
drop_object_enemy_4:
	jal draw_enemy4
	pop_stack($ra)
	jr $ra
drop_object_enemy_5:
	jal draw_enemy5
	pop_stack($ra)
	jr $ra
	
# test 1 note of all supported MIDI instruments
test_instruments:
	li $a0, 64
	li $a1, 500
	li $a2, 0
	li $a3, 100
audio_test_loop:
	li $v0, 1
	move $a0, $a2
	syscall
	li $a0, 64
	li $v0, 33
	syscall
	addi $a2, $a2, 1
	blt $a2, 128, audio_test_loop
	jr $ra

